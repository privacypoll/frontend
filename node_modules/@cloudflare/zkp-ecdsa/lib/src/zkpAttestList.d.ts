import { ExpProof } from './exp/exp.js';
import { GKProof } from './proofGK/gk.js';
import { PedersenParams } from './commit/pedersen.js';
import { Group } from './curves/group.js';
export declare class SignatureProofList {
    R: Group.Point;
    comS1: Group.Point;
    keyXcom: Group.Point;
    keyYcom: Group.Point;
    expProof: ExpProof[];
    membershipProof: GKProof;
    constructor(R: Group.Point, comS1: Group.Point, keyXcom: Group.Point, keyYcom: Group.Point, expProof: ExpProof[], membershipProof: GKProof);
    eq(o: SignatureProofList): boolean;
}
export declare class SystemParametersList {
    NistGroup: PedersenParams;
    ProofGroup: PedersenParams;
    SecLevel: number;
    constructor(NistGroup: PedersenParams, ProofGroup: PedersenParams, SecLevel: number);
    eq(o: SystemParametersList): boolean;
}
export declare function generateParamsList(secLevel?: number): SystemParametersList;
export declare function keyToInt(publicKey: CryptoKey): Promise<bigint>;
export declare function proveSignatureList(params: SystemParametersList, msgHash: Uint8Array, sigBytes: Uint8Array, publicKey: CryptoKey, which: number, keys: bigint[]): Promise<SignatureProofList>;
export declare function verifySignatureList(params: SystemParametersList, msgHash: Uint8Array, keys: bigint[], proof: SignatureProofList): Promise<boolean>;
//# sourceMappingURL=zkpAttestList.d.ts.map