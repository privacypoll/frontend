export declare function verifyPosRange(a: bigint, n: bigint): true | never;
export declare function bitLen(n: bigint): number;
export declare function byteLen(n: bigint): number;
export declare function isOdd(n: bigint): boolean;
export declare function isEven(n: bigint): boolean;
export declare function posMod(n: bigint, p: bigint): bigint;
export declare function expMod(n: bigint, e: bigint, p: bigint): bigint;
export declare function isNonNegative(n: bigint, p: bigint): boolean;
export declare function absolute(n: bigint, p: bigint): bigint;
export declare function isSquare(n: bigint, p: bigint): boolean;
export declare function invSqrtMod(n: bigint, p: bigint): bigint;
export declare function invMod(n: bigint, p: bigint): bigint;
export declare function invEuclid(t: bigint, N: bigint): bigint;
export declare function toBytes(n: bigint, len: number): Uint8Array;
export declare function hashNums(nums: bigint[]): Promise<bigint>;
export declare function fromBytes(a: Uint8Array): bigint;
export declare function rnd(n: bigint): bigint;
export declare function rndRange(min: bigint, max: bigint): bigint;
export declare function isPrime(n: bigint, iterations?: number): boolean;
export declare const serdeBigInt: {
    isRequired: boolean;
    serializer: (v: bigint) => string;
    deserializer: (this: unknown & {
        key: string;
    }, v: string) => bigint;
};
//# sourceMappingURL=big.d.ts.map